"""
Unit tests for audiobook introduction generation

Run with: pytest tests/test_intro_generation.py -v
"""
import pytest
from kokoro_tts import generate_audiobook_intro


class TestIntroGeneration:
    """Test suite for audiobook introduction generation"""

    def test_full_metadata(self):
        """Should generate full intro with title and author"""
        metadata = {'title': 'The Great Novel', 'author': 'Jane Doe'}
        intro = generate_audiobook_intro(metadata)
        assert 'The Great Novel' in intro
        assert 'Jane Doe' in intro
        assert 'Kokoro Text-to-Speech' in intro

    def test_title_only(self):
        """Should generate intro with only title"""
        metadata = {'title': 'Mystery Book', 'author': None}
        intro = generate_audiobook_intro(metadata)
        assert 'Mystery Book' in intro
        assert 'narrated by Kokoro' in intro

    def test_author_only(self):
        """Should generate intro with only author"""
        metadata = {'title': None, 'author': 'John Smith'}
        intro = generate_audiobook_intro(metadata)
        assert 'John Smith' in intro
        assert 'Kokoro Text-to-Speech' in intro

    def test_no_metadata(self):
        """Should generate fallback intro with no metadata"""
        metadata = {'title': None, 'author': None}
        intro = generate_audiobook_intro(metadata)
        assert 'Audiobook generated by Kokoro' in intro or 'Kokoro Text-to-Speech' in intro

    def test_empty_dict(self):
        """Should handle empty metadata dictionary"""
        metadata = {}
        intro = generate_audiobook_intro(metadata)
        assert isinstance(intro, str)
        assert len(intro) > 0

    @pytest.mark.parametrize("metadata,expected_content", [
        ({'title': 'Book A', 'author': 'Author A'}, ['Book A', 'Author A']),
        ({'title': 'Book B', 'author': None}, ['Book B', 'Kokoro']),
        ({'title': None, 'author': 'Author C'}, ['Author C', 'Kokoro']),
    ])
    def test_parametrized_metadata(self, metadata, expected_content):
        """Parametrized test for various metadata combinations"""
        intro = generate_audiobook_intro(metadata)
        for content in expected_content:
            assert content in intro


if __name__ == "__main__":
    # Allow running directly for backwards compatibility
    pytest.main([__file__, "-v"])
