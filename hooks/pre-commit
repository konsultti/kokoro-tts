#!/bin/bash
# Pre-commit hook for Kokoro TTS
# Performs quick syntax and quality checks before commit
#
# To bypass this hook (emergencies only):
#   git commit --no-verify

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}  Pre-Commit Checks - Kokoro TTS${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

ERRORS=0
WARNINGS=0

# Get list of staged Python files
STAGED_PY_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$STAGED_PY_FILES" ]; then
    echo -e "${GREEN}✓ No Python files to check${NC}"
    exit 0
fi

echo -e "${BLUE}Checking ${NC}$(echo "$STAGED_PY_FILES" | wc -l)${BLUE} Python file(s)...${NC}"
echo ""

# Check 1: Python syntax validation
echo -e "${BLUE}[1/4] Checking Python syntax...${NC}"
for file in $STAGED_PY_FILES; do
    if [ -f "$file" ]; then
        if ! python3 -m py_compile "$file" 2>/dev/null; then
            echo -e "${RED}  ✗ Syntax error in $file${NC}"
            ERRORS=$((ERRORS + 1))
        fi
    fi
done

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}  ✓ All files have valid Python syntax${NC}"
fi
echo ""

# Check 2: Look for debugging artifacts
echo -e "${BLUE}[2/4] Checking for debugging artifacts...${NC}"
DEBUG_FOUND=0
for file in $STAGED_PY_FILES; do
    if [ -f "$file" ]; then
        # Check for pdb/breakpoint
        if grep -n "import pdb\|pdb.set_trace()\|breakpoint()" "$file" > /dev/null; then
            echo -e "${YELLOW}  ⚠ Debugger statement found in $file${NC}"
            grep -n "import pdb\|pdb.set_trace()\|breakpoint()" "$file" | head -3
            DEBUG_FOUND=1
            WARNINGS=$((WARNINGS + 1))
        fi
    fi
done

if [ $DEBUG_FOUND -eq 0 ]; then
    echo -e "${GREEN}  ✓ No debugging artifacts found${NC}"
fi
echo ""

# Check 3: Look for TODO/FIXME/XXX
echo -e "${BLUE}[3/4] Checking for TODO/FIXME markers...${NC}"
TODO_FOUND=0
for file in $STAGED_PY_FILES; do
    if [ -f "$file" ]; then
        if grep -n "TODO\|FIXME\|XXX" "$file" > /dev/null; then
            TODO_COUNT=$(grep -c "TODO\|FIXME\|XXX" "$file" || true)
            if [ $TODO_COUNT -gt 0 ]; then
                echo -e "${YELLOW}  ⚠ Found $TODO_COUNT TODO/FIXME marker(s) in $file${NC}"
                TODO_FOUND=1
                WARNINGS=$((WARNINGS + 1))
            fi
        fi
    fi
done

if [ $TODO_FOUND -eq 0 ]; then
    echo -e "${GREEN}  ✓ No TODO/FIXME markers found${NC}"
fi
echo ""

# Check 4: File size check (warn if > 1000 lines)
echo -e "${BLUE}[4/4] Checking file sizes...${NC}"
LARGE_FILES=0
for file in $STAGED_PY_FILES; do
    if [ -f "$file" ]; then
        LINES=$(wc -l < "$file")
        if [ $LINES -gt 1000 ]; then
            echo -e "${YELLOW}  ⚠ Large file: $file ($LINES lines)${NC}"
            echo -e "${YELLOW}    Consider refactoring into smaller modules${NC}"
            LARGE_FILES=1
            WARNINGS=$((WARNINGS + 1))
        fi
    fi
done

if [ $LARGE_FILES -eq 0 ]; then
    echo -e "${GREEN}  ✓ All files are reasonable size${NC}"
fi
echo ""

# Summary
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}  ❌ Pre-commit checks failed with $ERRORS error(s)${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${YELLOW}Fix the errors above before committing.${NC}"
    echo ""
    echo -e "${YELLOW}To bypass this hook (emergencies only):${NC}"
    echo -e "  ${YELLOW}git commit --no-verify${NC}"
    echo ""
    exit 1
else
    if [ $WARNINGS -gt 0 ]; then
        echo -e "${YELLOW}  ⚠️  Pre-commit checks passed with $WARNINGS warning(s)${NC}"
    else
        echo -e "${GREEN}  ✅ All pre-commit checks passed!${NC}"
    fi
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 0
fi
