"""
Unit tests for audiobook introduction generation
"""
import sys
sys.path.insert(0, '.')

from kokoro_tts import generate_audiobook_intro

def test_full_metadata():
    """Should generate full intro with title and author"""
    metadata = {'title': 'The Great Novel', 'author': 'Jane Doe'}
    intro = generate_audiobook_intro(metadata)
    assert 'The Great Novel' in intro
    assert 'Jane Doe' in intro
    assert 'Kokoro Text-to-Speech' in intro
    print(f"Full intro: {intro}")

def test_title_only():
    """Should generate intro with only title"""
    metadata = {'title': 'Mystery Book', 'author': None}
    intro = generate_audiobook_intro(metadata)
    assert 'Mystery Book' in intro
    assert 'narrated by Kokoro' in intro
    print(f"Title-only intro: {intro}")

def test_author_only():
    """Should generate intro with only author"""
    metadata = {'title': None, 'author': 'John Smith'}
    intro = generate_audiobook_intro(metadata)
    assert 'John Smith' in intro
    assert 'Kokoro Text-to-Speech' in intro
    print(f"Author-only intro: {intro}")

def test_no_metadata():
    """Should generate fallback intro with no metadata"""
    metadata = {'title': None, 'author': None}
    intro = generate_audiobook_intro(metadata)
    assert 'Audiobook generated by Kokoro' in intro or 'Kokoro Text-to-Speech' in intro
    print(f"Fallback intro: {intro}")

if __name__ == "__main__":
    print("Testing introduction generation...")
    test_full_metadata()
    print("✓ Full metadata intro works")
    test_title_only()
    print("✓ Title-only intro works")
    test_author_only()
    print("✓ Author-only intro works")
    test_no_metadata()
    print("✓ Fallback intro works")
    print("\n✅ All intro generation tests passed!")
